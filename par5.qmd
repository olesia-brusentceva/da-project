---
title: "Незалежність баз данних"
---

::: {#div1 style="font-family: serif; font-size: 20px;"}
Фізична незалежність даних означає, що фізичне розташування та організація даних може змінюватися, не викликаючи при цьому змін загальної логічної структури даних або прикладних програм.

***Базові складові, які забезпечують незалежність даних***

Щоб забезпечити незалежність даних, модель повинна бути максимально відділена від її реалізації.

Безпосередня реалізація даних виконується системою керування баз даних (СКБД). У цій системі, щоб забезпечити незалежність даних,потрібно реалізувати наступні елементи:

• *збережуване поле* -- це екземпляр, що містить інформацію про тип одного значущого елементу на основі якого формуються дані цього типу.

• *збережуваний запис* -- є набором зв'язаних збережуваних полів, визначених відповідними типами даних;

• *збережуваний файл* -- це набір декількох екземплярів збережуваних записів, які мають однаковий тип.

Нижче зображено приклад збережуваної бази даних, яка містить збережувані поля, записи і файли. Ця база даних використовує одну таблицю (як приклад), в якій формується перелік абонентів з їх адресами та телефонними номерами.
:::

![](ex1.jpg)

::: {#div2 style="font-family: serif; font-size: 20px;"}
***Основні аспекти структур зберігання змінюваних даних***

Незалежність даних повинна максимально захищати застосунок від змін, що можуть виникати в даних. При активному використанні, база даних може зростати і розвиватись. Якщо дані незалежні, то збільшення кількості даних не повинно негативно впливати на роботу застосунку.

![](structures.png){fig-align="center" width="400"}

З метою захисту застосунку системи керування базами повинні враховувати наступні аспекти структури зберігання змінюваних даних.

**Спосіб представлення числових даних.** Для кожного формату формується значення відповідних параметрів (вибір системи числення, кількість знаків після коми тощо)

**Спосіб представлення символьних даних.** Важливим є використання відомих існуючих кодувань символів (ASCII, Unicode та інше).

**Корегування одиниць виміру для числових даних.** Налаштування представлення числових даних у полях таблиці (метри, кілометри, дюйми тощо).

**Способи кодування даних.** Тут важливим є те, яким чином кодуються ті чи інші категорії даних. Наприклад, кольори можна кодувати цифрами, наборами біт, рядковими позначеннями тощо.

**Представлення логічних полів як віртуальних**. Недоцільно зберігати суми збережуваних полів, якщо їх можна обчислювати "на льоту" та відображати у логічних полях. Поля, які обчислюються, ще називають ***віртуальними*** полями (virtual), а обчислені значення називаються ***непрямими***.

**Забезпечення правильної структури збережуваних записів.** Структура збережуваних записів передбачає одну з можливих операцій: *об'єднання інформативних полів декількох таблиць в одну таблицю*, *розбиття записів таблиці на декілька підтаблиць.* Метод використовується у випадку, коли потрібно оптимізувати швидкодію шляхом перенесення рідковикористовуваних частин таблиці у більш повільні пристрої зчитування/запису.

Наприклад, наступні дві таблиці можуть бути об'єднані в одну:
:::

::: {#div3 style="font-family: serif; font-size: 20px;"}
об'єднання таблиць у випадку інтеграції додатків

![](pic1.jpg)

Відповідно, навпаки, поля наступної таблиці можуть бути розбиті на частини:![](pic2.jpg)

**Забезпечення представлення структури збережуваних файлів різними способами.**

Використання таблиць з індексами, використання послідовності (ланцюжка) показників або використання асоціативних таблиць (хеш таблиць). Усі способи повинні забезпечувати максимальну ефективність виконання застосунку i основну вимогу до збереження даних, а саме: жоден з способів збереження даних не повинен впливати на застосунок, що оперує цими даними.
:::
